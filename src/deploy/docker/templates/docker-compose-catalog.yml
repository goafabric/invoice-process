services:
  catalog-service-application:
    container_name: catalog-service-application
    image:  goafabric/catalog-batch-service-native${_Values_server_arch}:3.3.0
    restart: 'no'
#    ports:
#      - "50600:8080"
    command: "-Xmx32m"

    healthcheck:
      test: "curl -f http://localhost:8080/actuator/health || exit 1"
      disable: true #disabled for native images because of no curl
      interval: 5s
      timeout: 10s
      retries: 5

    volumes:
      - tmp_catalog:/tmp
      - applogs_catalog:/usr/share/logs
    networks:
      - ${_Values_root_name}-net
    environment:
      #application
      TZ: Europe/Berlin
      server.port: "8080"
      server.tomcat.threads.max: "20"
      server.forward-headers-strategy: FRAMEWORK

      #security
      security.authentication.enabled: "false"

      #monitoring
      management.endpoint.health.show-details: always
      management.endpoints.web.exposure.include: "health,heapdump,circuitbreakers,prometheus"

      #zipkin/jaeger
      spring.application.name: "catalog-service"
      management.tracing.sampling.probability: "1.0"
      logging.level.io.opentelemetry: "OFF"
      management.otlp.tracing.endpoint: "http://host.docker.internal:4318/v1/traces"

      #persistence
      spring.datasource.url: "jdbc:postgresql://postgres:5432/core"
      spring.datasource.hikari.maximum-pool-size: "10"
      spring.datasource.hikari.connection-timeout: "10000"

      database.provisioning.goals: "-import-catalog-data"

      #secrets
      spring.datasource.username: "core-service"
      spring.datasource.password: "core-service"

      #log levels
      logging.level.root: "WARN"
      logging.level.org.goafabric: "INFO"
      logging.level.org.springframework: "INFO"

    depends_on:
      postgres:
        condition: service_healthy